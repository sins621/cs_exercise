1. Generate Password Dictionary ("dict.txt"):
   - Create permutations of "password".
   - Handle variations: uppercase/lowercase for each char.
   - Handle replacements: 'a' -> '@', 's' -> '5', 'o' -> '0' (optional).
   - Write all generated passwords to "dict.txt", one per line.

2. Password Attack on Authentication API:
   - Target URL: 
   - Username: "John"
   - Read passwords from "dict.txt".
   - For each password:
     - Construct Basic Authentication header.
     - Send a GET request to the authentication URL.
     - Check the HTTP status code of the response.
     - If status is 200 (OK):
       - Extract the unique URL from the response body.
       - Break the loop (successful authentication).
     - If status is 401 (Not Authorized), continue to the next password.
   - Handle potential network errors.

3. Prepare CV and Code for Upload:
   - Assume you have a CV file in PDF format.
   - Get the C# source code file of this program.
   - Create a Zip archive containing:
     - Your CV (PDF file).
     - The C# source code file (.cs).
     - The "dict.txt" file.
   - Ensure the Zip file size is less than 5MB.

4. Encode Zip File and Submit:
   - Read the bytes of the generated Zip file.
   - Encode the byte array as a Base64 string.
   - Construct a JSON payload with the following structure:
     ```json
     {
       "Data": "BASE64_ENCODED_ZIP_DATA",
       "Name": "Your Name",
       "Surname": "Your Surname",
       "Email": "email@domain.com"
     }
     ```
   - Replace `"Your Name"`, `"Your Surname"`, and `"email@domain.com"` with your actual details.
   - Send a POST request to the unique URL obtained in step 2.
   - Set the Content-Type header to "application/json".
   - Handle the API response (expecting "Success").

Prerequisites Reminder:
- Only Newtonsoft.Json NuGet package is allowed.
- Focus on clean, well-documented, and original code.
- Avoid using Google or Stack Overflow for solutions.
